install.packages("googleVis")
install.packages("DT")
install.packages("rhandsontable")
install.packages("corrplot")
install.packages("lubridate")
install.packages("reshape2")
install.packages("scales")
install.packages("tidyr")
install.packages("dplyr")
install.packages("plyr")
install.packages("ggfortify")
install.packages("htmltools")
install.packages("readr")
install.packages("scales")
install.packages("reshape2")
install.packages("gridExtra")
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/Karima/Desktop/My_shiny_APP/My_First_App_Shiny')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
sortableCheckboxGroupInput <- function(inputId, ...) {
# build jquery-ui dependency for sortable
jqueryUIDep <- htmlDependency("jqueryui", "1.10.4", c(href="shared/jqueryui/1.10.4"),
script = "jquery-ui.min.js",
stylesheet = "jquery-ui.min.css")
# return label and select tag
attachDependencies(
tagList(
singleton(tags$head(tags$script(src="js/sortable.js"))),
checkboxGroupInput(inputId, ...),
tags$script(paste0("makeSortable($('#", inputId, "'));"))),
jqueryUIDep)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
library(DT)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
data <- read.csv("C:/Users/Karima/Desktop/data1_modified.csv", sep=";")
for(i in 1:ncol(data)){
data[is.na(data[,i]), i] <- mean(as.numeric(data[,i], na.rm = TRUE))
}
View(data)
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
data[] <- lapply(data, NA2mean)
View(data)
my_data <- data.frame(Dataset())
my_data <- data.frame(data)
my_data
d <- my_data [,sapply(my_data ,is.integer)|sapply(my_data ,is.numeric)]
d
round(cor(d), 2)
cor <- as.data.frame(round(cor(d), 2))
cor
rownames(cor)
cor
dim(cor)
cor <- cbind(Variables = rownames(cor), cor)
cor
dim(cor)
cor <- cbind(Variables = rownames(cor), cor)
cor
dim(cor)
my_data <- data.frame(data)
d <- my_data [,sapply(my_data ,is.integer)|sapply(my_data ,is.numeric)]
cor <- as.data.frame(round(cor(d), 2))
cor <- cbind(Variables = rownames(cor), cor)
cor
dim(cor)
rownames(cor)
cor
cor <- as.data.frame(round(cor(d), 2))
dim(cor)
cor <- cbind(Variables = rownames(cor), cor)
cor
dim(cor)
df<-data
colnames(df)[sapply(df, is.numeric)|sapply(df,is.integer)]
my_data <- data.frame(data)
d <- my_data [,sapply(my_data ,is.integer)|sapply(my_data ,is.numeric)]
cor <- as.data.frame(round(cor(d), 2))
cor <- cbind(Variables = rownames(cor), cor)
cor
dim(cor)
class(cor)
cor <- as.data.frame(round(cor(d), 2))
dim(cor)
cor
cor <- cbind(Variables = rownames(cor), cor)
cor
cor <- as.data.frame(round(cor(d), 2))
cor <- cbind(Variables = rownames(cor), cor)
cor <- as.data.frame(round(cor(d), 2))
cor
shiny::runApp()
library(corrplot)
my_data <- data.frame(data)
d <- my_data [,sapply(my_data ,is.integer)|sapply(my_data ,is.numeric)]
cor <- as.data.frame(round(cor(d), 2))
cor <- cbind(Variables = rownames(cor), cor)
cor
corrplot(cor, type="lower")
cor<-as.matrix(cor)
corrplot(cor, type="lower")
corrplot(cor)#, type="lower")
cor <- cbind(Variables = rownames(cor), cor)
corrplot(cor)#, type="lower")
library(corrplot)
my_data <- data.frame(data)
d <- my_data [,sapply(my_data ,is.integer)|sapply(my_data ,is.numeric)]
cor <- as.data.frame(round(cor(d), 2))
cor <- cbind(Variables = rownames(cor), cor)
corrplot(as.matrix(cor))#, type="lower")
my_data <- data.frame(data)
d <- my_data [,sapply(my_data ,is.integer)|sapply(my_data ,is.numeric)]
cor <- as.data.frame(round(cor(d), 2))
corrplot(as.matrix(cor))#, type="lower")
corrplot(as.matrix(cor), type="lower")
my_data <- data.frame(data)
d <- my_data [,sapsapply(my_data ,is.numeric)]
d <- my_data [,sapply(my_data ,is.numeric)]
cor <- as.data.frame(round(cor(d), 2))
corrplot(as.matrix(cor), type="lower")
corrplot(as.matrix(cor))#, type="lower")
corrplot(as.matrix(cor), tl.cex = 0.5)#, type="lower")
corrplot(as.matrix(cor), tl.cex = 0.3)#, type="lower")
corrplot(as.matrix(cor), tl.cex = 0.4)#, type="lower")
corrplot(as.matrix(cor), tl.cex = 0.2)#, type="lower")
corrplot(as.matrix(cor), tl.cex = 0.1)#, type="lower")
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
